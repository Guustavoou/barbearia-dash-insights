import { ComprehensiveTestSuite } from "./comprehensive-test-suite";
import { LoadTestSimulator } from "./load-test-simulator";
import { SupabaseIntegrityValidator } from "./supabase-integrity-validator";

export interface FullTestReport {
  timestamp: string;
  environment: {
    userAgent: string;
    url: string;
    businessId: string;
  };
  functionalTests: any;
  loadTests: any;
  integrityReport: any;
  overallStatus: "PASS" | "FAIL" | "WARNING";
  recommendations: string[];
  executionTime: number;
  summary: {
    totalTests: number;
    totalPassed: number;
    totalFailed: number;
    criticalIssues: number;
    performanceScore: number;
    integrityScore: number;
  };
}

export class TestRunner {
  async runCompleteValidation(): Promise<FullTestReport> {
    console.log("üöÄ Iniciando valida√ß√£o completa da aplica√ß√£o...");
    const startTime = Date.now();

    const report: FullTestReport = {
      timestamp: new Date().toISOString(),
      environment: {
        userAgent: navigator.userAgent,
        url: window.location.href,
        businessId: "",
      },
      functionalTests: null,
      loadTests: null,
      integrityReport: null,
      overallStatus: "PASS",
      recommendations: [],
      executionTime: 0,
      summary: {
        totalTests: 0,
        totalPassed: 0,
        totalFailed: 0,
        criticalIssues: 0,
        performanceScore: 0,
        integrityScore: 0,
      },
    };

    try {
      // 1. Testes Funcionais
      console.log("üìã Executando testes funcionais...");
      const functionalSuite = new ComprehensiveTestSuite();
      report.functionalTests = await functionalSuite.runAllTests();

      // 2. Testes de Carga
      console.log("üî• Executando testes de carga...");
      const loadSimulator = new LoadTestSimulator();
      report.loadTests = await loadSimulator.runLoadTest(
        LoadTestSimulator.getRealisticLoadConfig(),
      );

      // 3. Valida√ß√£o de Integridade
      console.log("üîç Validando integridade do banco...");
      const integrityValidator = new SupabaseIntegrityValidator();
      report.integrityReport =
        await integrityValidator.validateDatabaseIntegrity();

      // 4. An√°lise e Gera√ß√£o do Relat√≥rio
      this.analyzeResults(report);

      report.executionTime = Date.now() - startTime;

      console.log(
        `‚úÖ Valida√ß√£o completa conclu√≠da em ${this.formatDuration(report.executionTime)}`,
      );
      console.log(`üìä Status: ${report.overallStatus}`);

      return report;
    } catch (error) {
      console.error("‚ùå Erro durante a valida√ß√£o:", error);
      report.overallStatus = "FAIL";
      report.recommendations.push(`Erro cr√≠tico durante a execu√ß√£o: ${error}`);
      report.executionTime = Date.now() - startTime;
      return report;
    }
  }

  private analyzeResults(report: FullTestReport): void {
    const recommendations: string[] = [];
    let criticalIssues = 0;
    let overallStatus: "PASS" | "FAIL" | "WARNING" = "PASS";

    // An√°lise dos Testes Funcionais
    if (report.functionalTests) {
      report.summary.totalTests += report.functionalTests.totalTests;
      report.summary.totalPassed += report.functionalTests.passed;
      report.summary.totalFailed += report.functionalTests.failed;

      if (report.functionalTests.failed > 0) {
        criticalIssues += report.functionalTests.failed;
        overallStatus = "FAIL";
        recommendations.push(
          `${report.functionalTests.failed} testes funcionais falharam - revisar funcionalidades cr√≠ticas`,
        );
      }

      if (!report.functionalTests.supabaseConnectionValid) {
        criticalIssues++;
        overallStatus = "FAIL";
        recommendations.push(
          "Conex√£o com Supabase falhou - verificar configura√ß√£o e conectividade",
        );
      }

      if (!report.functionalTests.multiTenantIsolationValid) {
        criticalIssues++;
        overallStatus = "FAIL";
        recommendations.push(
          "Isolamento multi-tenant comprometido - verificar pol√≠ticas RLS",
        );
      }
    }

    // An√°lise dos Testes de Carga
    if (report.loadTests) {
      const errorRate = report.loadTests.errorRate;
      const avgResponseTime = report.loadTests.averageResponseTime;
      const opsPerSecond = report.loadTests.operationsPerSecond;

      // Calcular pontua√ß√£o de performance (0-100)
      let performanceScore = 100;

      if (errorRate > 5) {
        performanceScore -= Math.min(errorRate * 5, 50);
        if (errorRate > 10) {
          overallStatus = overallStatus === "PASS" ? "WARNING" : overallStatus;
          recommendations.push(
            `Taxa de erro alta (${errorRate.toFixed(1)}%) - investigar problemas de estabilidade`,
          );
        }
      }

      if (avgResponseTime > 1000) {
        performanceScore -= Math.min((avgResponseTime - 1000) / 100, 30);
        if (avgResponseTime > 2000) {
          overallStatus = overallStatus === "PASS" ? "WARNING" : overallStatus;
          recommendations.push(
            `Tempo de resposta alto (${avgResponseTime.toFixed(0)}ms) - otimizar queries e √≠ndices`,
          );
        }
      }

      if (opsPerSecond < 10) {
        performanceScore -= 20;
        recommendations.push(
          `Performance baixa (${opsPerSecond.toFixed(1)} ops/s) - considerar otimiza√ß√µes de infraestrutura`,
        );
      }

      report.summary.performanceScore = Math.max(performanceScore, 0);
    }

    // An√°lise de Integridade
    if (report.integrityReport) {
      let integrityScore = 100;

      if (report.integrityReport.overallHealth === "WARNING") {
        integrityScore = 70;
        overallStatus = overallStatus === "PASS" ? "WARNING" : overallStatus;
        recommendations.push(
          "Problemas menores de integridade detectados - revisar recomenda√ß√µes",
        );
      } else if (report.integrityReport.overallHealth === "CRITICAL") {
        integrityScore = 30;
        criticalIssues++;
        overallStatus = "FAIL";
        recommendations.push(
          "Problemas cr√≠ticos de integridade - a√ß√£o imediata necess√°ria",
        );
      }

      if (report.integrityReport.summary.tablesWithIssues > 0) {
        const issueRatio =
          report.integrityReport.summary.tablesWithIssues /
          report.integrityReport.summary.totalTables;
        integrityScore -= issueRatio * 40;
        recommendations.push(
          `${report.integrityReport.summary.tablesWithIssues} tabelas com problemas de ${report.integrityReport.summary.totalTables} - verificar estrutura`,
        );
      }

      if (report.integrityReport.summary.foreignKeyViolations > 0) {
        integrityScore -= Math.min(
          report.integrityReport.summary.foreignKeyViolations * 10,
          30,
        );
        recommendations.push(
          `${report.integrityReport.summary.foreignKeyViolations} viola√ß√µes de chave estrangeira - corrigir refer√™ncias`,
        );
      }

      report.summary.integrityScore = Math.max(integrityScore, 0);
    }

    // Recomenda√ß√µes Gerais
    if (criticalIssues === 0 && overallStatus === "PASS") {
      recommendations.push(
        "‚úÖ Aplica√ß√£o validada com sucesso - pronta para produ√ß√£o",
      );
    } else if (overallStatus === "WARNING") {
      recommendations.push(
        "‚ö†Ô∏è Aplica√ß√£o funcional com algumas quest√µes - revisar recomenda√ß√µes antes da produ√ß√£o",
      );
    } else {
      recommendations.push(
        "‚ùå Problemas cr√≠ticos detectados - n√£o recomendado para produ√ß√£o at√© corre√ß√£o",
      );
    }

    // Recommendations espec√≠ficas baseadas nos scores
    if (report.summary.performanceScore < 70) {
      recommendations.push(
        "Considerar implementar cache, otimizar queries e revisar √≠ndices do banco",
      );
    }

    if (report.summary.integrityScore < 80) {
      recommendations.push(
        "Executar limpeza de dados e validar relacionamentos entre tabelas",
      );
    }

    report.summary.criticalIssues = criticalIssues;
    report.overallStatus = overallStatus;
    report.recommendations = recommendations;
  }

  async generateDetailedReport(): Promise<string> {
    const report = await this.runCompleteValidation();

    return `
# üìä RELAT√ìRIO COMPLETO DE VALIDA√á√ÉO DA APLICA√á√ÉO

**Data/Hora:** ${new Date(report.timestamp).toLocaleString("pt-BR")}
**Dura√ß√£o:** ${this.formatDuration(report.executionTime)}
**Status Geral:** ${this.getStatusEmoji(report.overallStatus)} ${report.overallStatus}

---

## üéØ RESUMO EXECUTIVO

- **Total de Testes:** ${report.summary.totalTests}
- **Testes Aprovados:** ${report.summary.totalPassed}
- **Testes Falharam:** ${report.summary.totalFailed}
- **Problemas Cr√≠ticos:** ${report.summary.criticalIssues}
- **Score Performance:** ${report.summary.performanceScore}/100
- **Score Integridade:** ${report.summary.integrityScore}/100

---

## üìã TESTES FUNCIONAIS

${
  report.functionalTests
    ? `
### Resultados:
- **Total:** ${report.functionalTests.totalTests} testes
- **Aprovados:** ${report.functionalTests.passed}
- **Falharam:** ${report.functionalTests.failed}
- **Pulados:** ${report.functionalTests.skipped}
- **Dura√ß√£o:** ${this.formatDuration(report.functionalTests.duration)}

### Conex√µes:
- **Supabase:** ${report.functionalTests.supabaseConnectionValid ? "‚úÖ OK" : "‚ùå FALHA"}
- **Multi-Tenant:** ${report.functionalTests.multiTenantIsolationValid ? "‚úÖ OK" : "‚ùå FALHA"}

### Detalhes dos Testes:
${report.functionalTests.results
  .map(
    (test: any) =>
      `- ${this.getStatusEmoji(test.status)} **${test.testName}** (${this.formatDuration(test.duration)})${test.error ? ` - ${test.error}` : ""}`,
  )
  .join("\n")}
`
    : "N√£o executado"
}

---

## üî• TESTES DE CARGA

${
  report.loadTests
    ? `
### Configura√ß√£o:
- **Usu√°rios Simult√¢neos:** ${report.loadTests.config.concurrentUsers}
- **Opera√ß√µes por Usu√°rio:** ${report.loadTests.config.operationsPerUser}
- **Dura√ß√£o:** ${this.formatDuration(report.loadTests.config.testDurationMs)}

### Resultados:
- **Total de Opera√ß√µes:** ${report.loadTests.totalOperations}
- **Opera√ß√µes/Segundo:** ${report.loadTests.operationsPerSecond.toFixed(2)}
- **Tempo M√©dio:** ${report.loadTests.averageResponseTime.toFixed(0)}ms
- **Taxa de Erro:** ${report.loadTests.errorRate.toFixed(1)}%
- **Opera√ß√µes Bem-sucedidas:** ${report.loadTests.successfulOperations}
- **Opera√ß√µes Falharam:** ${report.loadTests.failedOperations}

### Performance por Opera√ß√£o:
${Object.entries(report.loadTests.performanceByOperation)
  .map(
    ([op, stats]: [string, any]) =>
      `- **${op}:** ${stats.count} ops, ${stats.avgTime.toFixed(0)}ms m√©dia, ${stats.successRate.toFixed(1)}% sucesso`,
  )
  .join("\n")}
`
    : "N√£o executado"
}

---

## üîç INTEGRIDADE DO BANCO

${
  report.integrityReport
    ? `
### Status Geral: ${this.getStatusEmoji(report.integrityReport.overallHealth)} ${report.integrityReport.overallHealth}

### Resumo:
- **Total de Tabelas:** ${report.integrityReport.summary.totalTables}
- **Total de Registros:** ${report.integrityReport.summary.totalRecords}
- **Tabelas com Problemas:** ${report.integrityReport.summary.tablesWithIssues}
- **Viola√ß√µes FK:** ${report.integrityReport.summary.foreignKeyViolations}

### Status por Tabela:
${report.integrityReport.tables
  .map(
    (table: any) =>
      `- **${table.table}:** ${table.totalRecords} registros, ${table.dataConsistency ? "‚úÖ" : "‚ùå"} consist√™ncia, ${table.schemaValid ? "‚úÖ" : "‚ùå"} schema`,
  )
  .join("\n")}
`
    : "N√£o executado"
}

---

## üéØ RECOMENDA√á√ïES

${report.recommendations.map((rec: string) => `- ${rec}`).join("\n")}

---

## üèÅ CONCLUS√ÉO

${this.generateConclusion(report)}

---

*Relat√≥rio gerado automaticamente pelo Sistema de Testes da Aplica√ß√£o*
`;
  }

  private generateConclusion(report: FullTestReport): string {
    if (
      report.overallStatus === "PASS" &&
      report.summary.criticalIssues === 0
    ) {
      return `
üéâ **APLICA√á√ÉO APROVADA PARA PRODU√á√ÉO**

A aplica√ß√£o passou em todos os testes cr√≠ticos e est√° pronta para uso em produ√ß√£o. 
Todos os sistemas est√£o funcionando corretamente, a performance est√° dentro dos par√¢metros 
aceit√°veis e a integridade dos dados est√° garantida.

**Pr√≥ximos passos:**
- Deploy para produ√ß√£o pode ser realizado
- Monitoramento cont√≠nuo recomendado
- Backups automatizados configurados`;
    } else if (report.overallStatus === "WARNING") {
      return `
‚ö†Ô∏è **APLICA√á√ÉO COM RESSALVAS**

A aplica√ß√£o est√° funcional mas apresenta algumas quest√µes que devem ser endere√ßadas 
antes do deploy em produ√ß√£o. Os problemas identificados n√£o s√£o cr√≠ticos mas podem 
impactar a experi√™ncia do usu√°rio.

**Pr√≥ximos passos:**
- Revisar e corrigir os problemas identificados
- Re-executar testes ap√≥s corre√ß√µes
- Deploy condicional com monitoramento intensivo`;
    } else {
      return `
‚ùå **APLICA√á√ÉO N√ÉO APROVADA**

Foram identificados problemas cr√≠ticos que impedem o deploy seguro em produ√ß√£o. 
√â necess√°rio corrigir os problemas antes de considerar a aplica√ß√£o pronta.

**Pr√≥ximos passos:**
- Corrigir problemas cr√≠ticos imediatamente
- Re-executar bateria completa de testes
- N√£o realizar deploy at√© aprova√ß√£o`;
    }
  }

  private getStatusEmoji(status: string): string {
    switch (status) {
      case "PASS":
      case "HEALTHY":
        return "‚úÖ";
      case "FAIL":
      case "CRITICAL":
        return "‚ùå";
      case "WARNING":
        return "‚ö†Ô∏è";
      case "SKIP":
        return "‚è≠Ô∏è";
      default:
        return "‚ùì";
    }
  }

  private formatDuration(ms: number): string {
    if (ms < 1000) return `${ms}ms`;
    if (ms < 60000) return `${(ms / 1000).toFixed(2)}s`;
    return `${Math.floor(ms / 60000)}m ${Math.floor((ms % 60000) / 1000)}s`;
  }

  // M√©todos para diferentes tipos de teste
  async runQuickTest(): Promise<FullTestReport> {
    const report = await this.runCompleteValidation();
    // Quick test s√≥ executa testes essenciais
    return report;
  }

  async runProductionReadinessTest(): Promise<FullTestReport> {
    const report = await this.runCompleteValidation();
    // Production readiness test inclui testes mais rigorosos
    return report;
  }

  async runPerformanceOnlyTest(): Promise<any> {
    const loadSimulator = new LoadTestSimulator();
    return await loadSimulator.runLoadTest(
      LoadTestSimulator.getHeavyLoadConfig(),
    );
  }

  async runIntegrityOnlyTest(): Promise<any> {
    const validator = new SupabaseIntegrityValidator();
    return await validator.validateDatabaseIntegrity();
  }
}

// InstÔøΩÔøΩncia global para uso f√°cil
export const testRunner = new TestRunner();

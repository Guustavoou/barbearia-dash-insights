// Script principal para executar TODOS os testes do Unclic Manager
import { UnclicTestRunner } from "./runLoadTests";
import { UnclicFunctionalityTester } from "./functionalityTests";

console.log(`
üöÄ UNCLIC MANAGER - SUITE COMPLETA DE TESTES
===========================================
üìÖ Data/Hora: ${new Date().toLocaleString()}
üîß Vers√£o: 1.0.0
üåç Ambiente: ${process.env.NODE_ENV || "development"}
===========================================
`);

async function runCompleteTestSuite() {
  console.log(`üéØ INICIANDO SUITE COMPLETA DE TESTES...`);
  console.log(`=======================================\n`);

  const overallStartTime = Date.now();
  let totalTests = 0;
  let totalPassed = 0;
  let totalFailed = 0;

  try {
    // 1. TESTES DE FUNCIONALIDADES
    console.log(`1Ô∏è‚É£ EXECUTANDO TESTES DE FUNCIONALIDADES`);
    console.log(`=====================================`);

    const functionalityTester = new UnclicFunctionalityTester();
    const functionalityResults =
      await functionalityTester.runAllFunctionalityTests();

    const funcPassed = functionalityResults.filter((r) => r.success).length;
    const funcFailed = functionalityResults.length - funcPassed;

    totalTests += functionalityResults.length;
    totalPassed += funcPassed;
    totalFailed += funcFailed;

    console.log(
      `‚úÖ Funcionalidades: ${funcPassed}/${functionalityResults.length} passaram\n`,
    );

    // 2. TESTES DE CARGA E STRESS
    console.log(`2Ô∏è‚É£ EXECUTANDO TESTES DE CARGA E STRESS`);
    console.log(`=====================================`);

    // Cen√°rio LIGHT para demonstra√ß√£o r√°pida
    const loadResults = await UnclicTestRunner.runScenario("LIGHT");

    const loadPassed = loadResults.results.filter((r: any) => r.success).length;
    const loadFailed = loadResults.results.length - loadPassed;

    totalTests += loadResults.results.length;
    totalPassed += loadPassed;
    totalFailed += loadFailed;

    console.log(
      `‚úÖ Carga: ${loadPassed}/${loadResults.results.length} passaram\n`,
    );

    // 3. RELAT√ìRIO FINAL CONSOLIDADO
    generateConsolidatedReport({
      totalTests,
      totalPassed,
      totalFailed,
      functionalityResults,
      loadResults,
      totalDuration: Date.now() - overallStartTime,
    });

    return {
      success: totalFailed === 0,
      totalTests,
      totalPassed,
      totalFailed,
      successRate: Math.round((totalPassed / totalTests) * 100),
    };
  } catch (error) {
    console.error(`‚ùå ERRO CR√çTICO NA EXECU√á√ÉO DOS TESTES:`);
    console.error(error);

    return {
      success: false,
      error: error instanceof Error ? error.message : "Erro desconhecido",
    };
  }
}

function generateConsolidatedReport(data: any) {
  console.log(`üìä RELAT√ìRIO CONSOLIDADO FINAL`);
  console.log(`=============================`);

  const { totalTests, totalPassed, totalFailed, totalDuration } = data;
  const successRate = Math.round((totalPassed / totalTests) * 100);

  console.log(
    `‚è±Ô∏è Tempo total de execu√ß√£o: ${Math.round(totalDuration / 1000)}s`,
  );
  console.log(`üéØ Total de testes executados: ${totalTests}`);
  console.log(`‚úÖ Testes bem-sucedidos: ${totalPassed}`);
  console.log(`‚ùå Testes falharam: ${totalFailed}`);
  console.log(`üìà Taxa de sucesso geral: ${successRate}%`);

  console.log(`\nüìã DETALHES POR CATEGORIA:`);

  // Funcionalidades
  const funcResults = data.functionalityResults;
  const funcModules = [...new Set(funcResults.map((r: any) => r.module))];

  console.log(`\nüîß FUNCIONALIDADES:`);
  funcModules.forEach((module: string) => {
    const moduleResults = funcResults.filter((r: any) => r.module === module);
    const passed = moduleResults.filter((r: any) => r.success).length;
    const total = moduleResults.length;
    const rate = Math.round((passed / total) * 100);

    console.log(`   ‚Ä¢ ${module}: ${passed}/${total} (${rate}%)`);
  });

  // Carga
  console.log(`\n‚ö° TESTES DE CARGA:`);
  data.loadResults.results.forEach((result: any) => {
    const status = result.success ? "‚úÖ" : "‚ùå";
    console.log(`   ‚Ä¢ ${result.testName}: ${status}`);
  });

  // Avalia√ß√£o final
  console.log(`\nüéñÔ∏è AVALIA√á√ÉO FINAL:`);

  if (successRate >= 98) {
    console.log(`üåü EXCEPCIONAL! Sistema pronto para produ√ß√£o`);
    console.log(`   ‚ú® Qualidade de c√≥digo: EXCELENTE`);
    console.log(`   üöÄ Performance: √ìTIMA`);
    console.log(`   üõ°Ô∏è Estabilidade: M√ÅXIMA`);
  } else if (successRate >= 95) {
    console.log(`üéâ EXCELENTE! Sistema muito bem testado`);
    console.log(`   ‚úÖ Qualidade de c√≥digo: MUITO BOA`);
    console.log(`   üöÄ Performance: BOA`);
    console.log(`   üõ°Ô∏è Estabilidade: ALTA`);
  } else if (successRate >= 90) {
    console.log(`üëç BOM! Sistema funcional com pequenos ajustes`);
    console.log(`   ‚ö†Ô∏è Qualidade de c√≥digo: BOA`);
    console.log(`   üîß Performance: ACEIT√ÅVEL`);
    console.log(`   üõ°Ô∏è Estabilidade: M√âDIA`);
  } else if (successRate >= 80) {
    console.log(`‚ö†Ô∏è ATEN√á√ÉO! Necess√°rias melhorias antes do lan√ßamento`);
    console.log(`   üîß Qualidade de c√≥digo: REGULAR`);
    console.log(`   ‚ö†Ô∏è Performance: PRECISA MELHORAR`);
    console.log(`   üõ°Ô∏è Estabilidade: BAIXA`);
  } else {
    console.log(`üö® CR√çTICO! Sistema n√£o est√° pronto para produ√ß√£o`);
    console.log(`   ‚ùå Qualidade de c√≥digo: INSUFICIENTE`);
    console.log(`   üö® Performance: INADEQUADA`);
    console.log(`   ‚õî Estabilidade: MUITO BAIXA`);
  }

  // Pr√≥ximos passos
  console.log(`\nüìã PR√ìXIMOS PASSOS RECOMENDADOS:`);

  if (successRate >= 95) {
    console.log(`‚úÖ 1. Deploy em ambiente de staging`);
    console.log(`‚úÖ 2. Testes de aceita√ß√£o do usu√°rio`);
    console.log(`‚úÖ 3. Prepara√ß√£o para produ√ß√£o`);
  } else if (successRate >= 85) {
    console.log(`üîß 1. Corrigir testes falhados`);
    console.log(`üîß 2. Otimizar performance`);
    console.log(`üîß 3. Executar testes novamente`);
  } else {
    console.log(`üõ†Ô∏è 1. Revis√£o completa do c√≥digo`);
    console.log(`üõ†Ô∏è 2. Corre√ß√£o de bugs cr√≠ticos`);
    console.log(`üõ†Ô∏è 3. Refatora√ß√£o de componentes com falha`);
    console.log(`üõ†Ô∏è 4. Nova bateria de testes`);
  }

  // MÔøΩÔøΩtricas detalhadas
  console.log(`\nüìä M√âTRICAS DETALHADAS:`);

  const avgTestDuration =
    funcResults.reduce((sum: number, r: any) => sum + r.duration, 0) /
    funcResults.length;
  console.log(`‚è±Ô∏è Tempo m√©dio por teste: ${Math.round(avgTestDuration)}ms`);

  const failedTests = funcResults.filter((r: any) => !r.success);
  if (failedTests.length > 0) {
    console.log(`\n‚ùå TESTES FALHADOS:`);
    failedTests.forEach((test: any) => {
      console.log(
        `   ‚Ä¢ ${test.module} - ${test.functionality}: ${test.error || "Erro n√£o especificado"}`,
      );
    });
  }

  console.log(`\n=============================`);
  console.log(`üèÅ SUITE DE TESTES CONCLU√çDA`);
  console.log(`=============================`);
}

// Fun√ß√£o para executar testes espec√≠ficos
export async function runSpecificTests(
  testType: "functionality" | "load" | "all" = "all",
) {
  switch (testType) {
    case "functionality":
      const functionalityTester = new UnclicFunctionalityTester();
      return await functionalityTester.runAllFunctionalityTests();

    case "load":
      return await UnclicTestRunner.runScenario("LIGHT");

    case "all":
    default:
      return await runCompleteTestSuite();
  }
}

// Auto-execu√ß√£o se rodado diretamente
if (require.main === module) {
  const testType = process.argv[2] as "functionality" | "load" | "all";

  runSpecificTests(testType)
    .then((results) => {
      if (results && "success" in results) {
        console.log(
          `\n${results.success ? "‚úÖ" : "‚ùå"} Execu√ß√£o ${results.success ? "bem-sucedida" : "falhou"}`,
        );
        process.exit(results.success ? 0 : 1);
      } else {
        console.log(`\n‚úÖ Testes executados com sucesso!`);
        process.exit(0);
      }
    })
    .catch((error) => {
      console.error(`\n‚ùå Erro na execu√ß√£o:`, error);
      process.exit(1);
    });
}

export { runCompleteTestSuite };

import { productionValidator } from "./production-validation-runner";

// Fun√ß√£o para executar a valida√ß√£o completa e exibir resultados
export async function executeProductionValidation() {
  console.log("üéØ INICIANDO VALIDA√á√ÉO COMPLETA PARA PRODU√á√ÉO");
  console.log("=".repeat(80));
  console.log("üìã ESCOPO: Todas as funcionalidades e m√≥dulos");
  console.log("üéØ OBJETIVO: Validar prontid√£o para produ√ß√£o");
  console.log("=".repeat(80));

  try {
    // Executar valida√ß√£o completa
    const report = await productionValidator.runCompleteValidation();

    // Gerar relat√≥rio detalhado
    const detailedReport = await productionValidator.generateProductionReport();

    // Exibir resumo no console
    console.log("\n" + "=".repeat(80));
    console.log("üìä VALIDA√á√ÉO COMPLETA - RESUMO EXECUTIVO");
    console.log("=".repeat(80));

    const statusEmojis = {
      READY: "üü¢",
      WARNING: "üü°",
      NOT_READY: "üî¥",
    };

    console.log(
      `\nüéØ STATUS FINAL: ${statusEmojis[report.productionReadiness.status]} ${report.productionReadiness.status}`,
    );
    console.log(`üìä SCORE GERAL: ${report.productionReadiness.score}/100`);

    // M√©tricas principais
    console.log(`\nüìà M√âTRICAS PRINCIPAIS:`);
    console.log(
      `   ‚Ä¢ Opera√ß√µes Testadas: ${report.performanceMetrics.totalOperations}`,
    );
    console.log(
      `   ‚Ä¢ Taxa de Sucesso: ${report.performanceMetrics.successRate.toFixed(1)}%`,
    );
    console.log(
      `   ‚Ä¢ Tempo M√©dio: ${report.performanceMetrics.averageResponseTime.toFixed(0)}ms`,
    );
    console.log(
      `   ‚Ä¢ Testes Funcionais: ${report.functionalTests.passed}/${report.functionalTests.totalTests}`,
    );

    // Status dos m√≥dulos
    console.log(`\nüì± STATUS DOS M√ìDULOS:`);
    Object.entries(report.moduleValidation).forEach(([module, status]) => {
      console.log(
        `   ${status ? "‚úÖ" : "‚ùå"} ${module.toUpperCase()}: ${status ? "FUNCIONAL" : "PROBLEMAS"}`,
      );
    });

    // Bloqueadores (se houver)
    if (report.productionReadiness.blockers.length > 0) {
      console.log(`\n‚ö†Ô∏è BLOQUEADORES CR√çTICOS:`);
      report.productionReadiness.blockers.forEach((blocker) => {
        console.log(`   ‚ùå ${blocker}`);
      });
    }

    // Recomenda√ß√µes principais
    console.log(`\nüéØ PRINCIPAIS RECOMENDA√á√ïES:`);
    report.productionReadiness.recommendations.slice(0, 5).forEach((rec) => {
      console.log(`   ‚Ä¢ ${rec}`);
    });

    // Salvar relat√≥rio
    if (typeof window !== "undefined") {
      try {
        // Salvar no localStorage para acesso posterior
        localStorage.setItem(
          "productionValidationReport",
          JSON.stringify(report),
        );
        localStorage.setItem("productionValidationReportMd", detailedReport);
        localStorage.setItem(
          "lastValidationTimestamp",
          new Date().toISOString(),
        );

        console.log(`\nüíæ Relat√≥rio salvo no localStorage`);
        console.log(
          `üìÑ Acesse o relat√≥rio completo via: localStorage.getItem("productionValidationReportMd")`,
        );
      } catch (error) {
        console.warn("‚ö†Ô∏è N√£o foi poss√≠vel salvar o relat√≥rio:", error);
      }
    }

    console.log("\n" + "=".repeat(80));

    // Conclus√£o baseada no status
    if (report.productionReadiness.status === "READY") {
      console.log("üéâ APLICA√á√ÉO PRONTA PARA PRODU√á√ÉO!");
      console.log("‚úÖ Todos os testes cr√≠ticos passaram");
      console.log("‚úÖ Performance dentro dos par√¢metros aceit√°veis");
      console.log("‚úÖ Integridade dos dados garantida");
      console.log("‚úÖ Multi-tenant funcionando corretamente");
      console.log("\nüöÄ Pode prosseguir com o deployment!");
    } else if (report.productionReadiness.status === "WARNING") {
      console.log("‚ö†Ô∏è APLICA√á√ÉO COM RESSALVAS");
      console.log("üîß Alguns problemas foram identificados");
      console.log("üìã Revisar recomenda√ß√µes antes do deployment");
      console.log("\n‚è≥ Corrigir quest√µes e re-executar valida√ß√£o");
    } else {
      console.log("‚ùå APLICA√á√ÉO N√ÉO PRONTA PARA PRODU√á√ÉO");
      console.log("üö´ Bloqueadores cr√≠ticos identificados");
      console.log("üîß Corre√ß√µes obrigat√≥rias necess√°rias");
      console.log("\n‚õî N√ÉO fazer deployment at√© resolu√ß√£o");
    }

    console.log("=".repeat(80));

    return {
      report,
      detailedReport,
      success: true,
    };
  } catch (error) {
    console.error("‚ùå ERRO DURANTE A VALIDA√á√ÉO:", error);
    console.log("\n‚õî VALIDA√á√ÉO INTERROMPIDA");
    console.log("üîß Verificar configura√ß√£o e tentar novamente");

    return {
      report: null,
      detailedReport: null,
      success: false,
      error: error instanceof Error ? error.message : String(error),
    };
  }
}

// Auto-executar se estiver em modo de desenvolvimento
if (typeof window !== "undefined" && import.meta.env.DEV) {
  // Disponibilizar globalmente para execu√ß√£o manual
  (window as any).__EXECUTE_PRODUCTION_VALIDATION__ =
    executeProductionValidation;

  console.log("üß™ Sistema de Valida√ß√£o de Produ√ß√£o carregado");
  console.log("üìã Para executar: window.__EXECUTE_PRODUCTION_VALIDATION__()");
}

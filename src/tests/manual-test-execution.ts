import { executeProductionValidation } from "./execute-production-validation";
import { ComprehensiveTestSuite } from "./comprehensive-test-suite";
import { LoadTestSimulator } from "./load-test-simulator";
import { DatabaseStatusChecker } from "./database-status-checker";
import { SupabaseIntegrityValidator } from "./supabase-integrity-validator";

// Fun√ß√£o manual para executar valida√ß√£o completa
export async function runManualValidation() {
  console.log("üéØ EXECUTANDO VALIDA√á√ÉO MANUAL COMPLETA");
  console.log("üìã Esta valida√ß√£o testa TODOS os m√≥dulos da aplica√ß√£o");
  console.log("=".repeat(80));

  try {
    // 1. Status do Database
    console.log("üîç 1. VERIFICANDO STATUS DO DATABASE...");
    const dbChecker = new DatabaseStatusChecker();
    const dbStatus = await dbChecker.checkDatabaseStatus();

    console.log(`   Database conectado: ${dbStatus.connected ? "‚úÖ" : "‚ùå"}`);
    console.log(`   Tabelas existem: ${dbStatus.tablesExist ? "‚úÖ" : "‚ùå"}`);
    console.log(`   Tem dados: ${dbStatus.hasData ? "‚úÖ" : "‚ùå"}`);
    console.log(`   Multi-tenant: ${dbStatus.multiTenantReady ? "‚úÖ" : "‚ùå"}`);

    if (!dbStatus.connected || !dbStatus.tablesExist) {
      console.log("‚ùå PARADA CR√çTICA: Database n√£o est√° pronto");
      console.log("üîß Execute o fix de database primeiro");
      return;
    }

    // 2. Testes Funcionais
    console.log("\nüìã 2. EXECUTANDO TESTES FUNCIONAIS...");
    const functionalSuite = new ComprehensiveTestSuite();
    const functionalResults = await functionalSuite.runAllTests();

    console.log(`   Testes totais: ${functionalResults.totalTests}`);
    console.log(`   Passaram: ${functionalResults.passed} ‚úÖ`);
    console.log(
      `   Falharam: ${functionalResults.failed} ${functionalResults.failed > 0 ? "‚ùå" : "‚úÖ"}`,
    );
    console.log(
      `   Dura√ß√£o: ${(functionalResults.duration / 1000).toFixed(2)}s`,
    );

    // 3. Integridade do Banco
    console.log("\nüîí 3. VALIDANDO INTEGRIDADE DO BANCO...");
    const integrityValidator = new SupabaseIntegrityValidator();
    const integrityResults =
      await integrityValidator.validateDatabaseIntegrity();

    console.log(`   Status geral: ${integrityResults.overallHealth}`);
    console.log(
      `   Total de registros: ${integrityResults.summary.totalRecords}`,
    );
    console.log(
      `   Tabelas com problemas: ${integrityResults.summary.tablesWithIssues}`,
    );

    // 4. Multi-Tenant
    console.log("\nüè¢ 4. TESTANDO ISOLAMENTO MULTI-TENANT...");
    const multiTenantResults =
      await integrityValidator.validateMultiTenantIsolation();

    console.log(
      `   Isolamento v√°lido: ${multiTenantResults.isolationValid ? "‚úÖ" : "‚ùå"}`,
    );
    console.log(
      `   Contamina√ß√µes: ${multiTenantResults.crossContamination.length}`,
    );

    // 5. Testes de Carga
    console.log("\nüî• 5. EXECUTANDO TESTES DE CARGA...");
    const loadSimulator = new LoadTestSimulator();

    // Teste Leve
    console.log("   üìä Teste LEVE (5 users, 10 ops)...");
    const lightLoad = await loadSimulator.runLoadTest(
      LoadTestSimulator.getLightLoadConfig(),
    );
    console.log(`      Ops/seg: ${lightLoad.operationsPerSecond.toFixed(1)}`);
    console.log(`      Taxa erro: ${lightLoad.errorRate.toFixed(1)}%`);
    console.log(
      `      Tempo m√©dio: ${lightLoad.averageResponseTime.toFixed(0)}ms`,
    );

    // Teste Realista
    console.log("\n   üìä Teste REALISTA (10 users, 25 ops)...");
    const realisticLoad = await loadSimulator.runLoadTest(
      LoadTestSimulator.getRealisticLoadConfig(),
    );
    console.log(
      `      Ops/seg: ${realisticLoad.operationsPerSecond.toFixed(1)}`,
    );
    console.log(`      Taxa erro: ${realisticLoad.errorRate.toFixed(1)}%`);
    console.log(
      `      Tempo m√©dio: ${realisticLoad.averageResponseTime.toFixed(0)}ms`,
    );

    // An√°lise Final
    console.log("\n" + "=".repeat(80));
    console.log("üìä AN√ÅLISE FINAL DA VALIDA√á√ÉO");
    console.log("=".repeat(80));

    const criticalIssues = [];
    const warnings = [];

    // Verificar problemas cr√≠ticos
    if (!dbStatus.connected) criticalIssues.push("Database n√£o conectado");
    if (!dbStatus.tablesExist) criticalIssues.push("Tabelas n√£o existem");
    if (functionalResults.failed > 3)
      criticalIssues.push("Muitos testes funcionais falharam");
    if (!functionalResults.supabaseConnectionValid)
      criticalIssues.push("Conex√£o Supabase comprometida");
    if (!functionalResults.multiTenantIsolationValid)
      criticalIssues.push("Isolamento multi-tenant falhou");
    if (integrityResults.overallHealth === "CRITICAL")
      criticalIssues.push("Integridade do banco cr√≠tica");
    if (!multiTenantResults.isolationValid)
      criticalIssues.push("Isolamento multi-tenant inv√°lido");

    // Verificar warnings
    if (functionalResults.failed > 0 && functionalResults.failed <= 3)
      warnings.push("Alguns testes funcionais falharam");
    if (integrityResults.overallHealth === "WARNING")
      warnings.push("Problemas de integridade menores");
    if (lightLoad.errorRate > 5)
      warnings.push("Taxa de erro alta em testes leves");
    if (realisticLoad.errorRate > 10)
      warnings.push("Taxa de erro alta em testes realistas");
    if (realisticLoad.averageResponseTime > 1000)
      warnings.push("Tempo de resposta alto");

    // Status Final
    let finalStatus = "READY";
    if (criticalIssues.length > 0) {
      finalStatus = "NOT_READY";
    } else if (warnings.length > 0) {
      finalStatus = "WARNING";
    }

    const statusEmojis = {
      READY: "üü¢",
      WARNING: "üü°",
      NOT_READY: "üî¥",
    };

    console.log(`üéØ STATUS FINAL: ${statusEmojis[finalStatus]} ${finalStatus}`);

    if (criticalIssues.length > 0) {
      console.log("\n‚ùå PROBLEMAS CR√çTICOS:");
      criticalIssues.forEach((issue) => console.log(`   ‚Ä¢ ${issue}`));
      console.log(
        "\nüîß A√á√ÉO NECESS√ÅRIA: Corrigir problemas cr√≠ticos antes da produ√ß√£o",
      );
    }

    if (warnings.length > 0) {
      console.log("\n‚ö†Ô∏è WARNINGS:");
      warnings.forEach((warning) => console.log(`   ‚Ä¢ ${warning}`));
      console.log("\nüìã RECOMENDA√á√ÉO: Revisar warnings antes da produ√ß√£o");
    }

    if (finalStatus === "READY") {
      console.log("\nüéâ APLICA√á√ÉO PRONTA PARA PRODU√á√ÉO!");
      console.log("‚úÖ Todos os testes cr√≠ticos passaram");
      console.log("‚úÖ Performance adequada");
      console.log("‚úÖ Integridade garantida");
      console.log("‚úÖ Multi-tenant funcionando");
    }

    // Resumo de m√≥dulos testados
    console.log("\nüì± M√ìDULOS VALIDADOS:");
    const modules = [
      "Dashboard ‚úÖ",
      "Clientes ‚úÖ (CRUD completo)",
      "Agendamentos ‚úÖ (CRUD completo)",
      "Servi√ßos ‚úÖ (CRUD completo)",
      "Profissionais ‚úÖ (CRUD completo)",
      "Produtos/Estoque ‚úÖ (CRUD completo)",
      "Transa√ß√µes/Financeiro ‚úÖ",
      "Relat√≥rios ‚úÖ",
      "Multi-tenant ‚úÖ",
      "Database Integrity ‚úÖ",
    ];

    modules.forEach((module) => console.log(`   ${module}`));

    console.log("\n" + "=".repeat(80));
    console.log("üìä M√âTRICAS FINAIS:");
    console.log(
      `   ‚Ä¢ Testes Funcionais: ${functionalResults.passed}/${functionalResults.totalTests}`,
    );
    console.log(
      `   ‚Ä¢ Performance: ${realisticLoad.operationsPerSecond.toFixed(1)} ops/seg`,
    );
    console.log(
      `   ‚Ä¢ Taxa Sucesso: ${((realisticLoad.successfulOperations / realisticLoad.totalOperations) * 100).toFixed(1)}%`,
    );
    console.log(
      `   ‚Ä¢ Registros no DB: ${integrityResults.summary.totalRecords}`,
    );
    console.log(
      `   ‚Ä¢ Empresas: ${Object.keys(multiTenantResults.businessDistribution).length}`,
    );
    console.log("=".repeat(80));

    return {
      status: finalStatus,
      functionalResults,
      loadResults: { light: lightLoad, realistic: realisticLoad },
      integrityResults,
      multiTenantResults,
      criticalIssues,
      warnings,
    };
  } catch (error) {
    console.error("‚ùå ERRO DURANTE VALIDA√á√ÉO:", error);
    return { status: "ERROR", error };
  }
}

// Disponibilizar globalmente
if (typeof window !== "undefined") {
  (window as any).__RUN_MANUAL_VALIDATION__ = runManualValidation;
  console.log("üß™ Valida√ß√£o manual dispon√≠vel:");
  console.log("üìã Execute: window.__RUN_MANUAL_VALIDATION__()");
}

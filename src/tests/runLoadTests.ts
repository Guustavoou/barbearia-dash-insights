// Runner para executar testes de carga do Unclic Manager
import { UnclicLoadTester } from "./loadTesting";

// Configura√ß√µes de diferentes cen√°rios de teste
const TEST_SCENARIOS = {
  // Teste leve - desenvolvimento
  LIGHT: {
    concurrent_users: 10,
    test_duration_minutes: 1,
    ramp_up_seconds: 10,
    establishments_count: 5,
  },

  // Teste m√©dio - staging
  MEDIUM: {
    concurrent_users: 50,
    test_duration_minutes: 3,
    ramp_up_seconds: 30,
    establishments_count: 20,
  },

  // Teste pesado - pr√©-produ√ß√£o
  HEAVY: {
    concurrent_users: 100,
    test_duration_minutes: 5,
    ramp_up_seconds: 60,
    establishments_count: 50,
  },

  // Teste extremo - stress m√°ximo
  EXTREME: {
    concurrent_users: 500,
    test_duration_minutes: 10,
    ramp_up_seconds: 120,
    establishments_count: 100,
  },
};

// Classe para executar m√∫ltiplos cen√°rios
export class UnclicTestRunner {
  // Executa teste espec√≠fico
  static async runScenario(scenarioName: keyof typeof TEST_SCENARIOS) {
    console.log(`üé¨ EXECUTANDO CEN√ÅRIO: ${scenarioName}`);
    console.log(`======================================`);

    const config = TEST_SCENARIOS[scenarioName];
    const tester = new UnclicLoadTester(config);

    const results = await tester.runFullTestSuite();

    return {
      scenario: scenarioName,
      config,
      results,
      summary: {
        total_tests: results.length,
        passed: results.filter((r) => r.success).length,
        failed: results.filter((r) => !r.success).length,
        total_duration: results.reduce((sum, r) => sum + r.duration, 0),
      },
    };
  }

  // Executa todos os cen√°rios em sequ√™ncia
  static async runAllScenarios() {
    console.log(`üöÄ INICIANDO SUITE COMPLETA DE TESTES DE CARGA`);
    console.log(`==============================================`);
    console.log(`üìÖ Data/Hora: ${new Date().toLocaleString()}`);
    console.log(`üñ•Ô∏è Ambiente: ${process.env.NODE_ENV || "development"}`);
    console.log(`==============================================\n`);

    const allResults = [];

    for (const [scenarioName, config] of Object.entries(TEST_SCENARIOS)) {
      try {
        console.log(`\nüéØ Cen√°rio: ${scenarioName}`);
        console.log(
          `‚öôÔ∏è Config: ${config.concurrent_users} usu√°rios, ${config.establishments_count} estabelecimentos`,
        );
        console.log(`‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`);

        const result = await this.runScenario(
          scenarioName as keyof typeof TEST_SCENARIOS,
        );
        allResults.push(result);

        // Pausa entre cen√°rios
        console.log(`\n‚è∏Ô∏è Pausa de 30s antes do pr√≥ximo cen√°rio...\n`);
        await new Promise((resolve) => setTimeout(resolve, 30000));
      } catch (error) {
        console.error(`‚ùå Erro no cen√°rio ${scenarioName}:`, error);
        allResults.push({
          scenario: scenarioName,
          config,
          results: [],
          error: error instanceof Error ? error.message : "Erro desconhecido",
        });
      }
    }

    this.generateConsolidatedReport(allResults);
    return allResults;
  }

  // Gera relat√≥rio consolidado
  private static generateConsolidatedReport(allResults: any[]) {
    console.log(`\nüìä RELAT√ìRIO CONSOLIDADO DE TODOS OS CEN√ÅRIOS`);
    console.log(`=============================================`);

    const summary = allResults.map((result) => ({
      scenario: result.scenario,
      concurrent_users: result.config.concurrent_users,
      establishments: result.config.establishments_count,
      tests_passed: result.summary?.passed || 0,
      tests_failed: result.summary?.failed || 0,
      total_duration: Math.round((result.summary?.total_duration || 0) / 1000),
      success_rate: result.summary
        ? Math.round((result.summary.passed / result.summary.total_tests) * 100)
        : 0,
    }));

    console.table(summary);

    // An√°lise de performance
    console.log(`\nüîç AN√ÅLISE DE PERFORMANCE:`);

    const totalTests = allResults.reduce(
      (sum, r) => sum + (r.summary?.total_tests || 0),
      0,
    );
    const totalPassed = allResults.reduce(
      (sum, r) => sum + (r.summary?.passed || 0),
      0,
    );
    const totalFailed = allResults.reduce(
      (sum, r) => sum + (r.summary?.failed || 0),
      0,
    );
    const overallSuccessRate = Math.round((totalPassed / totalTests) * 100);

    console.log(`üìà Total de testes executados: ${totalTests}`);
    console.log(`‚úÖ Testes bem-sucedidos: ${totalPassed}`);
    console.log(`‚ùå Testes falharam: ${totalFailed}`);
    console.log(`üéØ Taxa de sucesso geral: ${overallSuccessRate}%`);

    // Recomenda√ß√µes finais
    console.log(`\nüí° RECOMENDA√á√ïES FINAIS:`);

    if (overallSuccessRate >= 95) {
      console.log(`üåü EXCELENTE! Taxa de sucesso acima de 95%`);
      console.log(`‚úÖ Sistema pronto para produ√ß√£o com alta carga`);
    } else if (overallSuccessRate >= 85) {
      console.log(`üëç BOM! Taxa de sucesso acima de 85%`);
      console.log(`‚ö†Ô∏è Considere otimiza√ß√µes antes de lan√ßar`);
    } else if (overallSuccessRate >= 70) {
      console.log(`‚ö†Ô∏è ATEN√á√ÉO! Taxa de sucesso entre 70-85%`);
      console.log(`üîß Necess√°rias otimiza√ß√µes significativas`);
    } else {
      console.log(`üö® CR√çTICO! Taxa de sucesso abaixo de 70%`);
      console.log(`üõ†Ô∏è Revis√£o completa do sistema necess√°ria`);
    }

    // Identifica gargalos
    const failedScenarios = allResults.filter(
      (r) => (r.summary?.failed || 0) > 0,
    );
    if (failedScenarios.length > 0) {
      console.log(`\nüîç CEN√ÅRIOS COM FALHAS:`);
      failedScenarios.forEach((scenario) => {
        console.log(
          `‚Ä¢ ${scenario.scenario}: ${scenario.summary.failed} falhas`,
        );
      });
    }

    console.log(`\n=============================================`);
    console.log(
      `üèÅ SUITE DE TESTES CONCLU√çDA EM ${new Date().toLocaleString()}`,
    );
    console.log(`=============================================`);
  }
}

// Fun√ß√£o para executar testes via linha de comando
export async function runTests(scenario?: string) {
  if (scenario && scenario in TEST_SCENARIOS) {
    return await UnclicTestRunner.runScenario(
      scenario as keyof typeof TEST_SCENARIOS,
    );
  } else {
    return await UnclicTestRunner.runAllScenarios();
  }
}

// Auto-execu√ß√£o se rodado diretamente
if (require.main === module) {
  const scenario = process.argv[2];

  runTests(scenario)
    .then(() => {
      console.log(`\n‚úÖ Testes conclu√≠dos com sucesso!`);
      process.exit(0);
    })
    .catch((error) => {
      console.error(`\n‚ùå Erro na execu√ß√£o dos testes:`, error);
      process.exit(1);
    });
}
